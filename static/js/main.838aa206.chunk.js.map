{"version":3,"sources":["logo.svg","components/Logo.js","components/MainLink.js","components/Paragraph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","logo","className","alt","MainLink","props","href","source","target","rel","txt","Paragraph","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,gLCa5BC,MARf,WACC,OACC,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,UCc5BC,MAff,SAAkBC,GACjB,OACC,uBACQH,UAAU,WACVI,KAAMD,EAAME,OACZC,OAAO,SACPC,IAAI,uBAEHJ,EAAMK,MCAFC,MAVf,WACC,OACC,mCACa,4CADb,yBC4CaC,MA5Bf,WAEE,OAEE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEQ,IAAM,eACNH,OAAS,wBAEX,kBAAC,EAAD,CACEG,IAAM,0BACNH,OAAS,uBAGX,kBAAC,EAAD,SC7BYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MADF,KAGAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.838aa206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n// import file from the proper directory relative to this file\r\nimport logo from \"../logo.svg\"\r\n\r\n//building a Logo component\r\nfunction Logo() {\r\n\treturn (\r\n\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t)\r\n\r\n\r\n}\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\n\r\n//building a MainLink component\r\n\r\n// use Javascript inside curly braces {} within the JSX code\r\nfunction MainLink(props) {\r\n\treturn (\r\n\t\t<a\r\n          className=\"App-link\"\r\n          href={props.source}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {props.txt}\r\n        </a>\r\n\t)\r\n\r\n\r\n}\r\n\r\nexport default MainLink;\r\n","import React from \"react\";\r\n\r\n\r\n//building a Paragraph component\r\nfunction Paragraph() {\r\n\treturn (\r\n\t\t<p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n\t)\r\n\r\n\r\n}\r\n\r\nexport default Paragraph;\r\n","\n// this file creates the entire application in JSX\n\n\n// import anything we need for our file to run\nimport React from 'react'; // lets us use the React package\nimport logo from './logo.svg'; // import a logo (local file) - need to import all images\nimport './App.css'; // import a CSS stylesheet (local file)\n\n// import the Logo component file here\nimport Logo from \"./components/Logo\" \nimport MainLink from \"./components/MainLink\" \nimport Paragraph from \"./components/Paragraph\" \n\n// probably just writing Javascript here?\n// wrong. \n\n// JSX: close to Javascript, but it has HTML-like syntax inside it\n\n\n// where the actual content is set\n// can only return ONE parent element\nfunction App() {\n  // return a single wrapper div containing content inside it\n  return (\n    // className???\n    <div className=\"App\"> \n      <header className=\"App-header\">\n        <Logo /> \n        {/* make a component for the p tag called Paragraph and import it into your App.js file */}\n        <Paragraph />\n        {/* make a component for the a tag called MainLink and import it into your App.js file */}\n        <MainLink \n          txt = \"Learn react!\"\n          source = \"https://reactjs.org\"\n        />\n        <MainLink \n          txt = \"...or maybe Vue instead\"\n          source = \"https://vuejs.org/\"\n        />\n\n        <Logo />\n        \n      </header>\n\n    </div>\n    \n  );\n} //function body ends here\n\nexport default App; // this says what to actually give out as OUTPUT\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // import the App component FROM the file called App(.js)\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> {/* Take the App component and render it inside strict mode */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}